var Board = function () {
    this.$el = $('#board');
    this.game = null;

    //this.phases = ['NEW', 'HANDS', 'FLOP', 'TURN', 'RIVER', 'END'];
    this.phase = 'HANDS';

    this.result = undefined;

    this.handsHidden = true;
    this.scoreHidden = true;
};

Board.prototype.createGame = function () {
    this.game = new Game();
    this.result = undefined;
    this.handsHidden = false;
    this.scoreHidden = false;
    this.game.addPlayer(new Player('Player #1'));
    this.game.addPlayer(new Player('Player #2'));
    this.game.addPlayer(new Player('Player #3'));
    this.game.addPlayer(new Player('Player #4'));
};

Board.prototype.nextAction = function () {
    switch (this.phase) {
        case 'NEW':
            this.createGame();
            this.phase = 'HANDS';
            this.nextAction();
            break;
        case 'HANDS':
            this.game.dealHands();
            this.phase = 'FLOP';
            break;
        case 'FLOP':
            this.game.dealFlop();
            this.phase = 'TURN';
            break;
        case 'TURN':
            this.game.dealTurn();
            this.phase = 'RIVER';
            break;
        case 'RIVER':
            this.game.dealRiver();
            this.phase = 'END';
            break;
        case 'END':
            this.handsHidden = false;
            this.scoreHidden = false;
            this.phase = 'NEW';
            break;
    }
    this.result = this.game.calculateScore();
};

Board.prototype.hideHands = function (hidden) {
    this.handsHidden = hidden;
};
Board.prototype.hideScore = function (hidden) {
    this.scoreHidden = hidden;
};

Board.prototype.redraw = function () {
    var self = this;
    self.$el.empty();
    this.game.players.forEach(function (player, index) {
        var playerDiv = $('<div>');
        playerDiv.addClass('player');
        playerDiv.addClass('_' + (index + 1));
        playerDiv.append('<h1 class="name">' + player.name + '</h1>');
        player.cards.forEach(function (card) {
            var cardDiv = $('<div>');
            cardDiv.addClass('card');
            if (!self.handsHidden) {
                cardDiv.addClass('_' + card.rank + card.suit);
            }
            playerDiv.append(cardDiv);
        });
        if (self.result && !self.handsHidden && !self.scoreHidden) {
            var resultDiv = $('<div>');
            resultDiv.addClass('result');
            if (self.result[index].winner) {
                resultDiv.addClass('winner');
            }
            //resultDiv.text(JSON.stringify(self.result[index].highest));
            resultDiv.html('<ul>' +
            '<li>' + self.result[index].highest.message + '</li>' +
            '<li>' + self.result[index].highest.score.toString(16) + '</li>' +
            '<li>' + JSON.stringify(self.result[index].highest.bestHand) + '</li>' +
            '</ul>');
            playerDiv.append(resultDiv);
        }
        self.$el.append(playerDiv);
    });

    var tableDiv = $('<div>');
    tableDiv.addClass('table');
    this.game.table.cards.forEach(function (card) {
        var cardDiv = $('<div>');
        cardDiv.addClass('card');
        cardDiv.addClass('_' + card.rank + card.suit);
        tableDiv.append(cardDiv);
    });
    self.$el.append(tableDiv);
};
var Card = function (rank, suit) {
    this.rank = rank;
    this.suit = suit;
};
Card.prototype.toString = function () {
    return '' + this.rank + this.suit;
};
var Deck = function () {
    this.cards = [];
    this.createDeck();
};
Deck.suites = ['D', 'H', 'S', 'C'];
Deck.ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
Deck.prototype.createDeck = function () {
    var i, j;
    for (i = 0; i < Deck.suites.length; i++) {
        for (j = 0; j < Deck.ranks.length; j++) {
            this.cards.push(new Card(Deck.ranks[j], Deck.suites[i]));
        }
    }
};
Deck.prototype.shuffle = function () {
    var i, j;
    for (i = 0; i < this.cards.length - 1; i++) {
        j = Math.floor(Math.random() * this.cards.length);
        var temp = this.cards[j];
        this.cards[j] = this.cards[i];
        this.cards[i] = temp;
    }
};
Deck.prototype.popCard = function () {
    return this.cards.pop();
};

var Game = function () {
    this.table = new Table();
    this.players = [];

    this.deck = new Deck();
    this.deck.shuffle();

    this.handEvaluator = HandEvaluator();
    this.winnerEvaluator = WinnerEvaluator();
};
Game.prototype.addPlayer = function (player) {
    this.players.push(player);
};
Game.prototype.dealHands = function () {
    var i;
    var self = this;
    this.players.forEach(function (player) {
        player.giveCard(self.deck.popCard());
        player.giveCard(self.deck.popCard());
    });
    console.log('hands dealt');
};
Game.prototype.dealFlop = function () {
    this.table.giveCard(this.deck.popCard());
    this.table.giveCard(this.deck.popCard());
    this.table.giveCard(this.deck.popCard());
    console.log('flop dealt');
};
Game.prototype.dealTurn = function () {
    this.table.giveCard(this.deck.popCard());
    console.log('turn dealt');
};
Game.prototype.dealRiver = function () {
    this.table.giveCard(this.deck.popCard());
    console.log('river dealt');
};

Game.prototype.calculateScore = function () {
    var self = this;
    var results = this.players.map(function (player) {
        return self.handEvaluator.calculate(player.cards.concat(self.table.cards));
    });
    results = this.winnerEvaluator.calculate(results);
    console.log(results);
    return results;
};
'use strict';

var HandEvaluator = function () {

    var getRanks = function (cards) {
        return cards.reduce(function (acc, card) {
            if (typeof acc[card.rank] === 'undefined') {
                acc[card.rank] = 1;
            } else {
                acc[card.rank]++;
            }
            return acc;
        }, {});
    };
    var getSuits = function (cards) {
        return cards.reduce(function (acc, card) {
            if (typeof acc[card.suit] === 'undefined') {
                acc[card.suit] = 1;
            } else {
                acc[card.suit]++;
            }
            return acc;
        }, {});
    };
    var isFlush = function (suits, cards) {
        return Object.keys(suits).reduce(function (acc, suit) {
            if (suits[suit] >= 5) {
                acc.flush = true;
                acc.suit = suit;
                acc.cards = cards;
            }
            return acc;
        }, {flush: false});
    };
    var isStraight = function (ranks) {
        var initial = ranks['A'] > 0 ? {count: 1, ranks: ['A']} : {count: 0, ranks: []};
        return Deck.ranks.reduce(function (acc, rank) {
            if (ranks[rank] && ranks[rank] > 0) {
                acc.count++;
                acc.ranks.push('' + rank);
            } else if (acc.count < 5) {
                acc.count = 0;
                acc.ranks.length = 0;
            }
            return acc;
        }, initial);
    };
    var sameRank = function (ranks, howMany) {
        return Object.keys(ranks).filter(function (rank) {
            return ranks[rank] === howMany;
        });
    };

    var highest = function (result) {
        var response = {
            score: 0,
            bestHand: [],
            message: ''
        };
        if (result.straight.count >= 5 && result.flush.flush) {
            response.message = 'straight flush';
            response.bestHand = result.straight.ranks.slice(0, 5);
            response.score = 0x800000;
        } else if (result.four.length > 0) {
            response.message = 'four of a kind';
            response.bestHand = result.kickers.slice(-1).concat(result.four).concat(result.four).concat(result.four).concat(result.four);
            response.score = 0x700000;
        } else if (result.three.length > 0 && result.pairs.length > 0) {
            response.message = 'full house';
            response.bestHand = result.pairs.slice(-1).concat(result.pairs.slice(-1)).concat(result.three).concat(result.three).concat(result.three);
            response.score = 0x600000;
        } else if (result.flush.flush) {
            response.message = 'flush';
            response.bestHand = result.flush.cards.filter(function (card) {
                return card.suit === result.flush.suit;
            }).slice(-5).map(function (card) {
                return card.rank;
            }).sort(function (a, b) {
                return Deck.ranks.indexOf(a) - Deck.ranks.indexOf(b);
            });
            response.score = 0x500000;
        } else if (result.straight.count >= 5) {
            response.message = 'straight';
            response.bestHand = result.straight.ranks.slice(0, 5);
            response.score = 0x400000;
        } else if (result.three.length > 0) {
            response.message = 'three of a kind';
            response.bestHand = result.kickers.slice(-2).concat(result.three).concat(result.three).concat(result.three);
            response.score = 0x300000;
        } else if (result.pairs.length >= 2) {
            response.message = 'two pairs';
            result.pairs.sort(function (a, b) {
                return Deck.ranks.indexOf(a) - Deck.ranks.indexOf(b);
            });
            var higherPair = result.pairs.slice(-2)[1];
            var lowerPair = result.pairs.slice(-2)[0];
            response.bestHand = result.kickers.slice(-1).concat([lowerPair, lowerPair]).concat([higherPair, higherPair]);
            response.score = 0x200000;
        } else if (result.pairs.length === 1) {
            response.message = 'one pair';
            var higherPair = result.pairs.slice(-1)[0];
            response.bestHand = result.kickers.slice(-3).concat([higherPair, higherPair]);
            response.score = 0x100000;
        } else {
            response.message = 'high card';
            response.bestHand = result.kickers.slice(-5);
            response.score = 0x000000;
        }
        response.score = response.bestHand.reduce(function (acc, rank, index) {
            return acc + (Deck.ranks.indexOf(rank) + 2) * Math.pow(0x10, index);
        }, response.score);
        return response;
    };

    return {
        calculate: function (cards) {
            var ranks = getRanks(cards);
            var suits = getSuits(cards);
            var flush = isFlush(suits, cards);
            var straight = isStraight(ranks);
            var four = sameRank(ranks, 4);
            var three = sameRank(ranks, 3);
            var pairs = sameRank(ranks, 2);
            var full = three.concat(pairs);
            full = full.length === 5 ? full : [];
            var kickers = sameRank(ranks, 1);
            kickers.sort(function (a, b) {
                return Deck.ranks.indexOf(a) - Deck.ranks.indexOf(b);
            });


            var result = {
                //ranks: ranks,
                //suits: suits,
                flush: flush,
                straight: straight,
                full: full,
                four: four,
                three: three,
                pairs: pairs,
                kickers: kickers
            };

            result.highest = highest(result);

            return result;
        }
    }
};

var Player = function (name) {
    this.name = name;
    this.cards = [];
};
Player.prototype.giveCard = function (card) {
    this.cards.push(card);
};

var Table = function () {
    this.cards = [];
};
Table.prototype.giveCard = function (card) {
    this.cards.push(card);
};

var WinnerEvaluator = function () {

    return {
        calculate: function (results) {
            var winner = results.reduce(function (acc, result, index) {
                if (result.highest.score > acc.result.score) {
                    acc.index = index;
                    acc.result = result.highest;
                }
                return acc;
            }, {
                index: -1,
                result: {
                    score: -1
                }
            });
            results[winner.index].winner = true;
            return results;
        }
    }
};
var board = new Board();

$('#newGame').on('click', function () {
    board = new Board();
    board.createGame();
    board.nextAction();
    board.redraw();
});

$('#nextAction').on('click', function () {
    board.nextAction();
    board.redraw();
});

$('#toggleScoreVisibility').on('click', function () {
    board.hideScore(!board.scoreHidden);
    board.redraw();
});

$('#toggleHandsVisibility').on('click', function () {
    board.hideHands(!board.handsHidden);
    board.redraw();
});

$('#newGame').click();
$('#nextAction').click();
$('#nextAction').click();
$('#nextAction').click();
$('#nextAction').click();
